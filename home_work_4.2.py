# Д.З 4.2
# Для списку цілих чисел потрібно знайти суму елементів із парними індексами [0-й, 2-й, 4-й ітд],
# потім перемножити цю суму на останній елемент вхідного масиву.
# Не забудьте, що перший елемент масиву має індекс 0.
# Для порожнього масиву результат завжди 0.

# [0, 1, 7, 2, 4, 8] => (0 + 7 + 4) * 8 = 88

# [1, 3, 5] => 30
# [6] => 36
# [] => 0

# ****** решение (для себя для наглядности )
# [0, 1, 7, 2, 4, 8]
# Чётные индексы: 0, 2, 4 → элементы: 0 + 7 + 4 = 11
# Последний элемент = 8
# Результат: 11 × 8 = 88

# [1, 3, 5]
# Чётные индексы: 0, 2 → элементы: 1 + 5 = 6
# Последний элемент = 5
# Результат: 6 × 5 = 30
# [6]
# Один элемент → 6
# Последний элемент = 6
# Результат: 6 × 6 = 36
# []
# Пустой список → результат 0
def even_index_sum(lst):
    if not lst:          # если список пустой
        return 0
    s = sum(lst[::2])    # сумма элементов с чётными индексами
    return s * lst[-1]   # умножаем на последний элемент

print(even_index_sum([0, 1, 7, 2, 4, 8]))   # 88
print(even_index_sum([1, 3, 5]))            # 30
print(even_index_sum([6]))                  # 36
print(even_index_sum([]))                   # 0

#  в одну строчку lambda
# if not lst — проверяет, пуст ли список.
# sum(lst[::2]) — сумма элементов с чётными индексами.
# lst[-1] — последний элемент.
# Всё в одной строке через тернарный оператор.

even_index_sum = lambda lst: 0 if not lst else sum(lst[::2]) * lst[-1]
print(even_index_sum([0, 1, 7, 2, 4, 8]))
print(even_index_sum([1, 3, 5]))
print(even_index_sum([6]))
print(even_index_sum([]))
